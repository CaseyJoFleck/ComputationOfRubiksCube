int cubePermutation(int counter, int *sequence, int index){//call cube1 in rubiks.c without using & sign in front
	if(sequence[0]==12&&sequence[1]==12&&sequence[2]==12&&sequence[3]==12){// use for loop with sizeof(sequence)
		printf("\nSequence:");
		for(int i = 0; i < 4;i++){printf(" %d ",sequence[i]); }
		return 0;
		}
	if(counter==12){//if cube solved, print seq, just printing sequence now
		//printf("Sequence:");
		//for(int i = 0; i < 4;i++){printf("%d",sequence[i]); }
		//if(counter==12){return 0;}
		counter=1;
		//printf("\nHERE1");
		backup(counter,&sequence,&index);
		printf("\nSequence:");
		for(int i = 0; i < 4;i++){printf(" %d ",sequence[i]); }
		printf("index: %d",index);
		//counter = 12;
		//if(counter==12){return 0;}
		//if(index==0){return 0;}
		}
	else{
		//printf("index: %d",index);
		counter++;
		sequence[index]=counter;
		//printf("\n");
		//printf("sequence[3]: %d",sequence[index]);
		//printf(" counter: %d",counter);
		//Turn(cube,1)
		}
	return cubePermutation(counter,sequence,index);//check to make sure is correct
} 


//he said starting with array filled with 0?? ask  //struct cube *cube1 ->put back in param
void backup(int counter, int **sequence, int *index){//make separate function without cube and see what numbers you get back for this function
	 //look up pointers and arrays in c
	//is sequence[last] suppose to represent which spot in the array it is??
	//printf("\nHERE2");
	int i=*index;
	int s = (*sequence)[i];
	printf("\ns: %d", s);
	while(s==12){
		//if(counter==1){
			//(*sequence)[i]=1;//append 1 to sequence here
		//}
		*index=i-1;
		i--;
	    s = (*sequence)[i];
			//printf("\ns: %d", s);
		//Turn(cube,12); 
		}
		//Turn(cube, sI);
		//Turn(cube, s);
		(*sequence)[i]=s;
		return;
}



int cubePermutation(int counter, int *sequence, int index){
	int endLoop = -1;
	while(endLoop == -1){
		if(sequence[0]==12&&sequence[1]==12&&sequence[2]==12&&sequence[3]==12){
			printf("\nSequence:");
			for(int i = 0; i < 4;i++){printf(" %d ",sequence[i]); }
			endLoop = 1;
		}
		else{
			if(counter==12){//if cube solved, print seq, just printing sequence now
				//printf("Sequence:");
				//for(int i = 0; i < 4;i++){printf("%d",sequence[i]); }
				//if(counter==12){return 0;}
				counter=1;
				backup(counter,&sequence,&index);
				printf("\nSequence:");
				for(int i = 0; i < 4;i++){printf(" %d ",sequence[i]); }
				printf("index: %d",index);
				//counter = 12;
				//if(counter==12){return 0;}
				//if(index==0){return 0;}
				}
			else{
				//printf("index: %d",index);
				counter++;
				sequence[index]=counter;
				//printf("\n");
				//printf("sequence[3]: %d",sequence[index]);
				//printf(" counter: %d",counter);
				//Turn(cube,1)
				}
		}
	}
	return 0;
} 

