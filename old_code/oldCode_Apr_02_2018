int checkEquality4(struct cube **cube1, struct cube **cube2, int turn1, int turn2, int turn3, int turn4, int turn5){
	int w, r, col;
	int flag = -1; 
	int i, turnNum;
	int counter = 0;
	for(i = 0; i < 5; i++){
			switch(i){
				case 0:
					turnNum = turn1;
					break;
				case 1:
					turnNum = turn2;
					break;
				case 2:
					turnNum = turn3;
					break;
				case 3:
					turnNum = turn4;
					break;
				case 4:
					turnNum = turn4;
					break;
			}
			switch(turnNum){
				case 1:
					up(*cube1);
					break;
				case 2:
					down(*cube1);
					break;
				case 3:
					left(*cube1);
					break;
				case 4:
					right(*cube1);
					break;
				case 5:
					back(*cube1);
					break;
				case 6:
					front(*cube1);
					break;
				case 7:
					upI(*cube1);
					break;
				case 8:
					downI(*cube1);
					break;
				case 9:
					leftI(*cube1);
					break;
				case 10:
					rightI(*cube1);
					break;
				case 11:
					backI(*cube1);
					break;
				case 12:
					frontI(*cube1);
					break;
				}
		}
		for(w = 0; w < 3; w++){	
			for(r = 0; r < 3; r++){
				for(col = 0; col < 3; col++){
				for(i = 0; i < 6; i++){				
						if((**cube1).aCubie[w][r][col]->currentOrientation[i] != (**cube2).aCubie[w][r][col]->currentOrientation[i]){  		
							flag = 0;
					
				}else{
					
				}
				}
			}
		}
	}//printf("\nFLAG: %d\n", flag);
	//turnCombination(&cube1, turn1,turn2, turn3, -1);
	if(flag == 0){
		return 0;
	}else if(flag == -1){
		return -1;
	}else{
		return 888;
	}
}


/*
void turnCombination(struct cube **cube1, int turn1, int turn2, int turn3, int direction){
	int i;
	int turnNum;
	if(direction == 1){
		
	}
	else if(direction == -1){
		for(i = 0; i < 3; i++){
			switch(i){
				case 0:
					turnNum = turn1;
					break;
				case 1:
					turnNum = turn2;
					break;
				case 2:
					turnNum = turn3;
					break;
				}
			switch(turnNum){
				case 1:
					upI(*cube1);
					break;
				case 2:
					downI(*cube1);
					break;
				case 3:
					leftI(*cube1);
					break;
				case 4:
					rightI(*cube1);
					break;
				case 5:
					backI(*cube1);
					break;
				case 6:
					frontI(*cube1);
					break;
				case 7:
					up(*cube1);
					break;
				case 8:
					down(*cube1);
					break;
				case 9:
					left(*cube1);
					break;
				case 10:
					right(*cube1);
					break;
				case 11:
					back(*cube1);
					break;
				case 12:
					front(*cube1);
					break;
				}
		}
	}
}
*/



int checkEquality4(struct cube **cube1, struct cube **cube2, int turn1, int turn2, int turn3, int turn4){
	int w, r, col;
	int flag = 1; 
	int i, turnNum;
	for(i = 0; i < 4; i++){
			switch(i){
				case 0:
					turnNum = turn1;
					break;
				case 1:
					turnNum = turn2;
					break;
				case 2:
					turnNum = turn3;
					break;
				case 3:
					turnNum = turn4;
					break;
				}
			switch(turnNum){
				case 1:
					up(cube1);
					break;
				case 2:
					down(cube1);
					break;
				case 3:
					left(cube1);
					break;
				case 4:
					right(cube1);
					break;
				case 5:
					back(cube1);
					break;
				case 6:
					front(cube1);
					break;
				case 7:
					upI(cube1);
					break;
				case 8:
					downI(cube1);
					break;
				case 9:
					leftI(cube1);
					break;
				case 10:
					rightI(cube1);
					break;
				case 11:
					backI(cube1);
					break;
				case 12:
					frontI(cube1);
					break;
				}
		}
		for(w = 0; w < 3; w++){	
			for(r = 0; r < 3; r++){
				for(col = 0; col < 3; col++){
					/*if((**cube1).aCubie[w][r][col]->colors[0] != (**cube2).aCubie[w][r][col]->colors[0]){
						//printf("match?%c%c\n",(**cube1).aCubie[w][r][col]->colors[0], (**cube2).aCubie[w][r][col]->colors[0]);
						flag = 0;
					}if((**cube1).aCubie[w][r][col]->colors[1] != (**cube2).aCubie[w][r][col]->colors[1]){
						flag = 0;
					}if((**cube1).aCubie[w][r][col]->colors[2] != (**cube2).aCubie[w][r][col]->colors[2]){
						flag = 0;
				}*/
				for(i = 0; i < 6; i++){
					if((**cube1).aCubie[w][r][col]->currentOrientation[i] != (**cube2).aCubie[w][r][col]->currentOrientation[i]){
						flag = 0;
						
						//printf("cube1 Orientation: %c,cube2 Orientation: %c, \n",(**cube1).aCubie[w][r][col]->currentOrientation[i], (**cube2).aCubie[w][r][col]->currentOrientation[i]);
						//printTurn(turn1, turn2, turn3, turn4);
					}
					/*if(w == (**cube1).aCubie[w][r][col]->homeLocation[0]&&r == (**cube1).aCubie[w][r][col]->homeLocation[1]&&col == (**cube1).aCubie[w][r][col]->homeLocation[2]){  		
							flag = 0;
					}*/
				}
			}
		}
	}
	
	/*for(w = 0; w < 3; w++){	
			for(r = 0; r < 3; r++){
				for(col = 0; col < 3; col++){
				for(i = 0; i < 6; i++){
					if((**cube1).aCubie[w][r][col]->currentOrientation[i] == (**cube2).aCubie[w][r][col]->homeOrientation[i]){  //set to == instead of !=
						if((**cube1).aCubie[w][r][col]->homeLocation[0] == w && (**cube2).aCubie[w][r][col]->homeLocation[1] == r){
							if((**cube2).aCubie[w][r][col]->homeLocation[2] == col){
						flag = 0;
							}
						}
					}
				}
			}
		}
	}*/
	
	
	//printf("\nFLAG: %d\n", flag);
	//turnCombination(&cube1, turn1,turn2, turn3, -1);
	if(flag == 0){
		return 0;
	}
	return 1;
/*	else if(flag == -1){
		return -1;
	}else{
		return 888;
	}*/
}
